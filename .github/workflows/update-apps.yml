name: Update GitHub Pages Apps

on:
  workflow_dispatch:
    # Allow manual triggering
  push:
    branches: [ main ]
    paths: [ '.github/workflows/update-apps.yml' ]

jobs:
  update-apps:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install @octokit/rest@latest
        
    - name: Discover GitHub Pages apps
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        node << 'EOF'
        const { Octokit } = require('@octokit/rest');
        const fs = require('fs');
        
        async function discoverGitHubPagesApps() {
          const octokit = new Octokit({
            auth: process.env.GITHUB_TOKEN
          });
          
          try {
            // Get all repositories for the user with pagination
            let allRepos = [];
            let page = 1;
            let hasMore = true;
            
            while (hasMore) {
              console.log(`Fetching page ${page} of repositories...`);
              const { data: repos } = await octokit.rest.repos.listForUser({
                username: 'DanielMeixner',
                per_page: 100,
                page: page,
                sort: 'updated'
              });
              
              allRepos = allRepos.concat(repos);
              
              // Check if there are more pages
              hasMore = repos.length === 100;
              page++;
            }
            
            console.log(`Total repositories found: ${allRepos.length}`);
            
            // Filter repositories with GitHub Pages enabled
            const pagesRepos = allRepos.filter(repo => repo.has_pages);
            console.log(`Repositories with GitHub Pages: ${pagesRepos.length}`);
            
            const apps = [];
            
            for (const repo of pagesRepos) {
              console.log(`Processing repository: ${repo.name}`);
              
              // Get additional repository information
              const { data: repoDetails } = await octokit.rest.repos.get({
                owner: 'DanielMeixner',
                repo: repo.name
              });
              
              // Try to get the pages URL
              let pagesUrl = '';
              try {
                const { data: pages } = await octokit.rest.repos.getPages({
                  owner: 'DanielMeixner',
                  repo: repo.name
                });
                pagesUrl = pages.html_url;
              } catch (error) {
                // If pages API fails, construct URL based on repository name
                if (repo.name === 'DanielMeixner.github.io') {
                  pagesUrl = 'https://danielmeixner.github.io';
                } else {
                  pagesUrl = `https://danielmeixner.github.io/${repo.name}`;
                }
              }
              
              // Extract tags from topics and language
              const tags = [];
              if (repoDetails.topics) {
                tags.push(...repoDetails.topics.map(topic => 
                  topic.charAt(0).toUpperCase() + topic.slice(1)
                ));
              }
              if (repoDetails.language) {
                tags.push(repoDetails.language);
              }
              
              // Create app entry
              const app = {
                name: repo.name === 'DanielMeixner.github.io' ? 'DanielMeixner.github.io' : repo.name,
                description: repoDetails.description || 'No description available',
                url: pagesUrl,
                repository: repo.html_url,
                screenshot: null, // Will be populated later if screenshot service is implemented
                tags: tags,
                language: repoDetails.language || 'Unknown',
                stars: repoDetails.stargazers_count,
                forks: repoDetails.forks_count,
                updatedAt: repoDetails.updated_at
              };
              
              apps.push(app);
            }
            
            // Sort apps by update date (most recent first)
            apps.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));
            
            // Create the apps data structure
            const appsData = {
              lastUpdated: new Date().toISOString(),
              totalApps: apps.length,
              apps: apps
            };
            
            // Write to apps-data.json
            fs.writeFileSync('apps-data.json', JSON.stringify(appsData, null, 2));
            
            console.log(`Successfully discovered ${apps.length} GitHub Pages apps`);
            console.log('Apps found:', apps.map(app => app.name).join(', '));
            
          } catch (error) {
            console.error('Error discovering GitHub Pages apps:', error);
            process.exit(1);
          }
        }
        
        discoverGitHubPagesApps();
        EOF
        
    - name: Take screenshots (optional)
      run: |
        # Screenshot functionality is planned for future implementation
        # This could be enhanced with tools like Playwright or Puppeteer
        # For now, apps will display with placeholder screenshots
        echo "Screenshot functionality is planned for future implementation"
        echo "Apps will display with 'Screenshot not available' placeholders"
        
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add apps-data.json
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "ðŸ¤– Update GitHub Pages apps data - $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          git push
        fi